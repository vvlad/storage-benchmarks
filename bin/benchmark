#!/bin/bash
#
# By Vlad Verestiuc <vvlad@me.com> & Bogdan Velcea <phil2k@gmail.com>
#

function total_memory {
  if [[ "$OSTYPE" =~ ^darwin ]] ; then
    size=`sysctl hw.memsize |awk '{ print $2}'`
    echo $[ size / ( 1024 * 1024 ) ]
  else
    free -m|awk '/^Mem:/{print $2}'
  fi
}

function default_io_engine {
  if [[ "$OSTYPE" =~ ^darwin ]] ; then
    echo "posixaio"
  else
    echo "libaio"
  fi
}

function usage() {
  local message="$*"
  [ ! -z "$message" ] && echo "Error: $message"
  cat <<-EOS
$0 --mount=<mount> [--name=<tests_name>] [--size=<number><unit>] [--time=<minutes>] [--engine=<io engine>]
  --name=<tests_name>    name/description of the tests (used in results folder naming)
  --size=<megabytes>     the size of the data file in megabytes
                         default: --size=$size (MBytes)
  --time=<minutes>       the number of minutes to run the test
                         default: --time=$time
  --engine=<io engine>   what io engine to use see fio man page


EOS
}

function err_exit() {
  local message="$*"
  [ ! -z "$message" ] && echo "Error: $message"
  exit 1
}

[ -z "`type fio 2>/dev/null`" ] && echo "fio is not installed. apt-get install fio" && exit 1

mount=""; name=""
memory=`total_memory`
size=$[ $memory * 2 ]
time=1
engine=`default_io_engine`

args=`getopt -o '+m:n:s:t:e:' -l 'mount:,name:,size:,time:,engine:,help' -- "$@"`
errors="$?"
if [ "$errors" -gt 0 ]; then
  usage "Error in arguments passed to $0"
  exit 1
fi
eval set -- "$args"
opts_on=on
while [ "$#" -gt 0 ]; do
  case "$1" in
        -m|--mount) shift; mount="$1" ;;
        -n|--name) shift; name="$1" ;;
        -s|--size) shift; size="$1" ;;
        -t|--time) shift; time="$1" ;;
        -e|--engine) shift; engine="$1" ;;
        --help) usage "" && exit 1 ;;
        --) ops_on="" ;;
        *) if [ -z "$opts_on" ]; then
                echo "Invalid option: $1 "\! >&2
           else
                break # non option argument
           fi
           ;;
  esac
  shift
done

[ -z "$mount" ] && usage "Missing --mount option" && exit 1
[ ! -d "$mount" ] && usage "Value provided to --mount is missing or invalid" && exit 1

if [[ ! "$size" =~ ^[0-9]+$ ]]; then # not a number
  if [[ "$size" =~ ^[0-9]+[bBkKmMgG] ]]; then
    u=`echo "$size"|sed -r '~s/^[0-9]*(.).*/\1/'|tr '[[:upper:]]' '[[:lower:]]'`
    size=`echo "$size"|sed -r '~s/^([0-9]*).*/\1/'`
    case "$u" in
    	b) size=$[$size/1024/1024] ;;
    	k) size=$[$size/1024] ;;
    	g) size=$[$size*1024] ;;
    esac
  else
    usage "Invalid size number " && exit 1
  fi
fi

if [ -z "$name" -a -n "$desc" ]; then name="$desc"; fi
if [ -z "$name" ]; then
  echo -n "Please enter a name/description for the tests to do (or call this script with --name=\"...\"): "
  read name
  [ -z "$name" ] && usage "Need a name for results" && exit 1
fi
name=`echo "$name"|sed -r 's/[^a-zA-Z0-9_]/_/g'`

echo
echo "Do tests (using $engine) on $mount with $size MBytes of data in $time minutes ..."
echo
echo "If you'll get a \"Bus error\" message, you should decrease size "\!
echo

tmp_dir='/tmp/fio'"$$"
work_dir=`pwd`
[ "$tmp_dir" = "$mount" -o `dirname "$tmp_dir"` = "$mount" ] && err_exit "Cannot have mount dir ($mount) in the same place with temporary files used by $0 ! Try making a subfolder in $mount, and use it as mount for this benchmarks "\!
project_root=`cd $(dirname $0)/..;pwd`
results_dir="${work_dir}/${name}.results"

templates=`find ${project_root} -type f -name '*.fio.in'`

rm -rf "$tmp_dir" >/dev/null 2>&1
mkdir -p "$tmp_dir"
[ ! -d "$tmp_dir" ] && err_exit "Cannot create folder $tmp_dir"
rm -rf "${results_dir}" 2>&1
mkdir -p "${results_dir}"
[ ! -d "$results_dir" ] && err_exit "Cannot create folder $results_dir"

trap '{ echo -e "\nForce ending script ...\n" ; rm -rf "$tmp_dir" "$mount"/* ; killall fio 2>/dev/null ; sleep 2 ; killall -9 fio 2>/dev/null ; exit 1 ; }' SIGINT

for template in ${templates} ; do
  test_name=`basename "$template"`
  test_name="${test_name/.fio.in/}"
  config_file="${tmp_dir}/${test_name}.fio"
  result_file="${results_dir}/${test_name}.out"

  sed " s@\${size}@${size}m@g
        s@\${directory}@${mount}@g
        s@\${time}@$[ $time * 60 ]@g
        s@\${engine}@${engine}@g" < "$template" > "$config_file"

  echo "Running $test_name"
  
  cd "$work_dir" && fio "$config_file" --output="$result_file"
  echo "Cleaning $mount for test $test_name"  
  rm -rf "$mount"/*
done

echo -e "\nThe results are in ${results_dir} "\!"\n"

rm -rf "$tmp_dir" >/dev/null 2>&1

